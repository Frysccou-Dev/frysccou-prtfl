---
import { getTranslation, developer } from "../../utils/i18n";
const { lang } = Astro.props;

const devBlock = lang === "es"
  ? {
      name: "Francisco",
      role: "Desarrollador Full Stack",
      humanSkills: [
        "Comunicación Efectiva",
        "Resolución de Problemas",
        "Colaboración en Equipo",
        "Adaptabilidad",
        "Pensamiento Crítico",
        "Aprendizaje Continuo"
      ],
      values: "Curiosidad y Proactividad"
    }
  : {
      name: "Francisco",
      role: "Full Stack Engineer",
      humanSkills: [
        "Effective Communication",
        "Problem Solving",
        "Team Collaboration",
        "Adaptability",
        "Critical Thinking",
        "Continuous Learning"
      ],
      values: "Curiosity & Proactivity"
    };
---

<section class="min-h-screen bg-blue-950 relative overflow-hidden">
  <div class="absolute inset-0">
    <div class="absolute inset-0 bg-[linear-gradient(to_right,#1f2f44_1px,transparent_1px),linear-gradient(to_bottom,#1f2f44_1px,transparent_1px)] bg-[size:4rem_4rem] [mask-image:radial-gradient(ellipse_60%_50%_at_50%_0%,#000_70%,transparent_110%)]"></div>
  </div>
  
  <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-20 sm:pb-16 pb-20">
    <div class="grid lg:grid-cols-2 gap-12 items-center min-h-[80vh]">
      <div class="space-y-8">
        <div class="space-y-2">
          <p class="text-blue-300 text-sm font-mono tracking-wider uppercase">
            {getTranslation(lang, "hero.role")}
          </p>
          <h1 class="text-5xl sm:text-6xl lg:text-7xl font-bold text-white leading-tight">
            {getTranslation(lang, "hero.name")}
          </h1>
        </div>
        
        <div class="space-y-6">
          <p class="text-xl sm:text-2xl text-blue-200 leading-relaxed max-w-lg">
            {getTranslation(lang, "hero.description")}
          </p>
          <p class="text-blue-400 font-mono text-sm italic">
            {getTranslation(lang, "hero.codeComment")}
          </p>
        </div>
        
        <div class="flex flex-col sm:flex-row gap-4 pt-4">
          <a 
            href="#proyectos" 
            class="group inline-flex items-center gap-2 px-6 py-3 bg-blue-600 text-white font-medium rounded-none border border-blue-600 hover:bg-transparent hover:text-blue-400 transition-all duration-300"
          >
            <span>{getTranslation(lang, "hero.viewProjects")}</span>
            <svg class="w-4 h-4 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
            </svg>
          </a>
          
          <a 
            href="#contacto" 
            class="inline-flex items-center gap-2 px-6 py-3 border border-blue-400 text-blue-400 font-medium rounded-none hover:bg-blue-400 hover:text-blue-950 transition-all duration-300"
          >
            <span>{getTranslation(lang, "hero.getInTouch")}</span>
          </a>
        </div>
      </div>
      
      <div class="relative">
        <div class="bg-blue-900/30 border border-blue-800/50 rounded-lg p-6 backdrop-blur-sm">
          <div class="flex items-center gap-2 mb-4">
            <div class="flex gap-1.5">
              <div class="w-3 h-3 rounded-full bg-red-500"></div>
              <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
              <div class="w-3 h-3 rounded-full bg-green-500"></div>
            </div>
            <span class="text-blue-300 text-sm font-mono ml-2">portfolio.astro</span>
          </div>
          <div class="font-mono text-sm space-y-2">
            <div class="text-blue-300">
              <span class="text-purple-400">const</span> 
              <span class="text-blue-200"> developer</span> 
              <span class="text-white"> = {'{'}</span>
            </div>
            <div class="pl-4 space-y-1">
              <div>
                <span class="text-blue-300">name:</span> 
                <span class="text-green-400">'{devBlock.name}'</span><span class="text-white">,</span>
              </div>
              <div>
                <span class="text-blue-300">role:</span> 
                <span class="text-green-400">'{devBlock.role}'</span><span class="text-white">,</span>
              </div>
              <div>
                <span class="text-blue-300">humanSkills:</span> 
                <span class="text-white">[</span>
              </div>
              <div class="pl-4 space-y-1">
                {devBlock.humanSkills.map((skill, i) => (
                  <div><span class="text-green-400">'{skill}'</span>{i < devBlock.humanSkills.length - 1 ? <span class="text-white">,</span> : null}</div>
                ))}
              </div>
              <div><span class="text-white">],</span></div>
              <div>
                <span class="text-blue-300">values:</span> 
                <span class="text-green-400">'{devBlock.values}'</span>
              </div>
            </div>
            <div class="text-white">{'}'};</div>
          </div>
        </div>
        <div class="absolute -top-4 -right-4 w-24 h-24 border border-blue-600/30 rounded-lg"></div>
        <div class="absolute -bottom-4 -left-4 w-16 h-16 border border-blue-500/20 rounded-lg"></div>
      </div>
    </div>
  </div>
  
  <div class="absolute bottom-4 sm:bottom-8 left-1/2 transform -translate-x-1/2 ">
    <div class="flex flex-col items-center gap-2 text-blue-400">
      <span class="text-xs font-mono">scroll down</span>
      <svg class="w-4 h-4 animate-bounce" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
      </svg>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('a[href^="#"]').forEach(link => {
      link.addEventListener('click', function(e) {
        const targetId = this.getAttribute('href').slice(1);
        const target = document.getElementById(targetId);
        if (target) {
          e.preventDefault();
          const navbar = document.getElementById('navbar');
          const offset = navbar ? navbar.offsetHeight : 0;
          window.scrollTo({
            top: target.getBoundingClientRect().top + window.scrollY - offset,
            behavior: 'smooth'
          });
        }
      });
    });
  });
</script>